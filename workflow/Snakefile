from pathlib import Path

configfile: "config/config.yaml"

include: "rules/list_scans.smk"

MAPPING = list_scans(config["datadir"], config["ethics_prefix"])
SUBJECTS, SESSIONS = zip(*MAPPING)

rule all:
    localrule: True
    default_target: True
    input:
        expand(
            expand(
                "{{resultsdir}}/bids/derivatives/dwi_preprocessing/sub-{subject}/ses-{session}",
                zip,
                subject=SUBJECTS,
                session=SESSIONS,
            ),
            resultsdir=config["resultsdir"],
        )

module raw_to_bids:
    snakefile:
        "rules/raw_to_bids.smk"
    config: config

use rule * from raw_to_bids as raw_to_bids_*

module dwi_misc:
    snakefile:
        "rules/dwi_misc.smk"
    config: config

use rule * from dwi_misc as dwi_misc_*

def strip_extensions(filename):
    """helper function to remove all extensions from a file path"""
    filepath = Path(filename)
    prefix = filepath.stem.split(".")[0]
    return filepath.parent / prefix

rule hd_bet:
    input:
        "{resultsdir}/bids/sub-{subject}/ses-{session}"
    output:
        brain="{resultsdir}/bids/derivatives/dwi_preprocessing/derivatives/hd_bet/sub-{subject}/ses-{session}/anat/sub-{subject}_ses-{session}_{entity}_T1w_brain.nii.gz",
        mask="{resultsdir}/bids/derivatives/dwi_preprocessing/derivatives/hd_bet/sub-{subject}/ses-{session}/anat/sub-{subject}_ses-{session}_{entity}_T1w_brain_mask.nii.gz"
    conda:
        "envs/hd_bet.yaml"
    params:
        output=lambda wildcards, output: strip_extensions(output["brain"])
    threads: config["hd_bet"]["threads"]
    resources:
        cpus=lambda wildcards, threads: threads,
        mem_mb=config["hd_bet"]["mem_mb"],
        time_min=config["hd_bet"]["time_min"]
    shell:
        "hd-bet -i {input}/anat/sub-{wildcards.subject}_ses-{wildcards.session}_{wildcards.entity}_T1w.nii.gz "
        "-o {params.output} "
        "-tta 0 -mode fast -device cpu"

rule eddy:
    message: "Eddy current correction"
    input:
        bids="{resultsdir}/bids/sub-{subject}/ses-{session}",
        dwidnbcdg="{resultsdir}/bids/derivatives/dwi_preprocessing/derivatives/misc/sub-{subject}/ses-{session}/dwi/sub-{subject}_ses-{session}_{entity}_dwidnbcdg.nii.gz",
        mask="{resultsdir}/bids/derivatives/dwi_preprocessing/derivatives/misc/sub-{subject}/ses-{session}/dwi/sub-{subject}_ses-{session}_{entity}_dwi_brain_mask.nii.gz",
        synb0_disco="{resultsdir}/bids/derivatives/dwi_preprocessing/derivatives/synb0_disco/sub-{subject}_ses-{session}_{entity}"
    output:
        "{resultsdir}/bids/derivatives/dwi_preprocessing/derivatives/eddy/sub-{subject}/ses-{session}/dwi/sub-{subject}_ses-{session}_{entity}_eddy.nii.gz",
        "{resultsdir}/bids/derivatives/dwi_preprocessing/derivatives/eddy/sub-{subject}/ses-{session}/dwi/sub-{subject}_ses-{session}_{entity}_eddy.eddy_rotated_bvecs"
    params:
        output=lambda wildcards, output: strip_extensions(output[0])
    conda:
        "envs/eddy.yaml"
    threads: config["eddy"]["threads"]
    resources:
        cpus=lambda wildcards, threads: threads,
        mem_mb=config["eddy"]["mem_mb"],
        time_min=config["eddy"]["time_min"],
        gpu=config["eddy"]["gpu"],
        slurm_extra=config["eddy"].get("slurm_extra", "")
    shell:
        "export FSLDIR=$(dirname $(which eddy_cpu))/.. && "
        ". ${{FSLDIR}}/etc/fslconf/fsl.sh && "
        "{config[eddy][executable]} "
        "--imain={input.dwidnbcdg} "
        "--mask={input.mask} "
        "--bvecs={input.bids}/dwi/sub-{wildcards.subject}_ses-{wildcards.session}_{wildcards.entity}_dwi.bvec "
        "--bvals={input.bids}/dwi/sub-{wildcards.subject}_ses-{wildcards.session}_{wildcards.entity}_dwi.bval "
        "--topup={input.synb0_disco}/topup "
        "--index={config[eddy][index]} "
        "--acqp={config[acqparams]} "
        "--out={params.output} "
        "--fwhm=0 "
        "--flm=quadratic "
        "--cnr_maps "
        "--repol "
        "--mporder=6 "
        "-v"

def get_derivatives_filenames(wildcards):
    # create a dependency on heudiconv rule output
    checkpoints.heudiconv.get(**wildcards)

    bids_pattern = (
        f"{wildcards.resultsdir}/bids/sub-{wildcards.subject}/ses-{wildcards.session}"
        f"/anat/sub-{wildcards.subject}_ses-{wildcards.session}_"
        "{entity}_T1w.nii.gz"
    )
    entities, = glob_wildcards(bids_pattern)

    basedir = "{resultsdir}/bids/derivatives/dwi_preprocessing/derivatives"
    filenames_pattern = [
        "/misc/sub-{subject}/ses-{session}/dwi/sub-{subject}_ses-{session}_{entity}_dwi_brain_mask.nii.gz",
        "/hd_bet/sub-{subject}/ses-{session}/anat/sub-{subject}_ses-{session}_{entity}_T1w_brain.nii.gz",
        "/eddy/sub-{subject}/ses-{session}/dwi/sub-{subject}_ses-{session}_{entity}_eddy.nii.gz",
        "/eddy/sub-{subject}/ses-{session}/dwi/sub-{subject}_ses-{session}_{entity}_eddy.eddy_rotated_bvecs"
    ]
    filenames_pattern = [basedir + pattern for pattern in filenames_pattern]

    filenames = expand(filenames_pattern, entity=entities, **wildcards)

    return filenames

rule dwi_preprocessing:
    localrule: True
    input:
        get_derivatives_filenames
    output:
        directory("{resultsdir}/bids/derivatives/dwi_preprocessing/sub-{subject}/ses-{session}")
    shell:
        # TODO copy or move instead of linking?
        # TODO use subdirectories (anat and dwi)
        "mkdir -p {output} && ln -s {input} {output}"
