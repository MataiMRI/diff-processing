from pathlib import Path
import yaml

configfile: "config/config.yaml"

def strip_extensions(filename):
    """helper function to remove all extensions from a file path"""
    filepath = Path(filename)
    prefix = filepath.stem.split(".")[0]
    return filepath.parent / prefix

def is_valid_session(resultsdir, subject, session, entity):
    """assess if a session if valid based on the corresponding QC status file"""

    qc_file = Path(
        f"{resultsdir}/bids/derivatives/mriqc/"
        f"/sub-{subject}_ses-{session}_{entity}_qc.yaml"
    )
    qc_data = yaml.safe_load(qc_file.read_text())
    qc_fields = [field for field in qc_data if field.endswith("_qc")]
    is_valid = all(qc_data[field] for field in qc_fields)

    return is_valid

def list_valid_sessions(resultsdir):
    """list all valid sessions from every subjects, based on QC status files"""

    patterns = glob_wildcards(
        f"{resultsdir}/bids/derivatives/mriqc/"
        "/sub-{subject}_ses-{session}_{entity}_qc.yaml"
    )

    subjects, sessions, entities = [], [], []
    for subject, session, entity in zip(*patterns):
        if is_valid_session(resultsdir, subject, session, entity):
            subjects.append(subject)
            sessions.append(session)
            entities.append(entity)

    return subjects, sessions, entities

SUBJECTS, SESSIONS, ENTITIES = list_valid_sessions(config['resultsdir'])

module tidy_snake:
    snakefile:
        github("MataiMRI/tidySnake", path="workflow/Snakefile", branch="main")  # TODO use tag
    config: config

use rule * from tidy_snake as tidy_snake_*

rule all:
    localrule: True
    default_target: True
    input:
        rules.tidy_snake_all.input,
        # TODO issues with multiple identical SUBJECT/SESSION pairs?
        expand(
            f"{config['resultsdir']}/bids/derivatives/dwi_preprocessing/sub-{{subject}}/ses-{{session}}",
            zip,
            subject=SUBJECTS,
            session=SESSIONS,
        ),
        f"{config['resultsdir']}/bids/derivatives/dwi_preprocessing/derivatives/eddy_squad"

rule hd_bet:
    input:
        "{resultsdir}/bids/sub-{subject}/ses-{session}"
    output:
        brain="{resultsdir}/bids/derivatives/dwi_preprocessing/derivatives/hd_bet/sub-{subject}/ses-{session}/anat/sub-{subject}_ses-{session}_{entity}_T1w_brain.nii.gz",
        mask="{resultsdir}/bids/derivatives/dwi_preprocessing/derivatives/hd_bet/sub-{subject}/ses-{session}/anat/sub-{subject}_ses-{session}_{entity}_T1w_brain_mask.nii.gz"
    conda:
        "envs/hd_bet.yaml"
    params:
        output=lambda wildcards, output: strip_extensions(output["brain"])
    threads: config["hd_bet"]["threads"]
    resources:
        cpus=lambda wildcards, threads: threads,
        mem_mb=config["hd_bet"]["mem_mb"],
        runtime=config["hd_bet"]["time_min"]
    shell:
        "hd-bet -i {input}/anat/sub-{wildcards.subject}_ses-{wildcards.session}_{wildcards.entity}_T1w.nii.gz "
        "-o {params.output} "
        "{config[hd_bet][extra_args]}"

rule convert_pre_denoise:
    input:
        "{resultsdir}/bids/sub-{subject}/ses-{session}"
    output:
        "{resultsdir}/bids/derivatives/dwi_preprocessing/derivatives/misc/sub-{subject}/ses-{session}/dwi/sub-{subject}_ses-{session}_{entity}_dwi.mif"
    container:
        "docker://mrtrix3/mrtrix3:3.0.4"
    group: "dwi_misc"
    shell:
        "mrconvert {input}/dwi/sub-{wildcards.subject}_ses-{wildcards.session}_{wildcards.entity}_dwi.nii.gz "
        "-fslgrad {input}/dwi/sub-{wildcards.subject}_ses-{wildcards.session}_{wildcards.entity}_dwi.bvec "
        "{input}/dwi/sub-{wildcards.subject}_ses-{wildcards.session}_{wildcards.entity}_dwi.bval "
        "{output}"

rule denoise:
    input:
        "{derivatives}/sub-{subject}_ses-{session}_{entity}_dwi.mif",
    output:
        denoised="{derivatives}/sub-{subject}_ses-{session}_{entity}_dwi_denoise.mif",
        noise="{derivatives}/sub-{subject}_ses-{session}_{entity}_noise.mif"
    container:
        "docker://mrtrix3/mrtrix3:3.0.4"
    threads: config["denoise"]["threads"]
    resources:
        cpus=lambda wildcards, threads: threads,
        mem_mb=config["denoise"]["mem_mb"],
        runtime=config["denoise"]["time_min"]
    group: "dwi_misc"
    shell:
        "dwidenoise -nthreads {threads} {input} {output.denoised} -noise {output.noise}"

rule fslroi:
    input:
        "{resultsdir}/bids/sub-{subject}/ses-{session}"
    output:
        "{resultsdir}/bids/derivatives/dwi_preprocessing/derivatives/misc/sub-{subject}/ses-{session}/dwi/sub-{subject}_ses-{session}_{entity}_nodif.nii.gz"
    container:
        "docker://mrtrix3/mrtrix3:3.0.4"
    group: "dwi_misc"
    shell:
        "fslroi {input}/dwi/sub-{wildcards.subject}_ses-{wildcards.session}_{wildcards.entity}_dwi.nii.gz "
        "{output} 0 1"

rule bet:
    input:
        "{derivatives}/sub-{subject}_ses-{session}_{entity}_nodif.nii.gz"
    output:
        dwibrain="{derivatives}/sub-{subject}_ses-{session}_{entity}_dwi_brain.nii.gz",
        dwimask="{derivatives}/sub-{subject}_ses-{session}_{entity}_dwi_brain_mask.nii.gz"
    container:
        "docker://mrtrix3/mrtrix3:3.0.4"
    group: "dwi_misc"
    shell:
        "bet {input} {output.dwibrain} -m "

rule convert_pre_bias:
    input:
        "{derivatives}/sub-{subject}_ses-{session}_{entity}_dwi_brain_mask.nii.gz"
    output:
        "{derivatives}/sub-{subject}_ses-{session}_{entity}_dwi_mask.mif"
    container:
        "docker://mrtrix3/mrtrix3:3.0.4"
    group: "dwi_misc"
    shell:
        "mrconvert {input} {output}"

rule bias_correction:
    message: "Bias field correction"
    input:
        data="{derivatives}/sub-{subject}_ses-{session}_{entity}_dwi_denoise.mif",
        mask="{derivatives}/sub-{subject}_ses-{session}_{entity}_dwi_mask.mif",
    output:
        debiased="{derivatives}/sub-{subject}_ses-{session}_{entity}_dwidnbc.mif",
        bias="{derivatives}/sub-{subject}_ses-{session}_{entity}_bias.mif"
    container:
        "docker://mrtrix3/mrtrix3:3.0.4"
    group: "dwi_misc"
    shell:
        "dwibiascorrect fsl {input.data} {output.debiased} -mask {input.mask} -bias {output.bias}"

rule ringing_correction:
    message: "Ringing artifact correction"
    input:
        "{derivatives}/sub-{subject}_ses-{session}_{entity}_dwidnbc.mif"
    output:
        "{derivatives}/sub-{subject}_ses-{session}_{entity}_dwidnbcdegibbs.mif"
    container:
        "docker://mrtrix3/mrtrix3:3.0.4"
    threads: config["ringing_correction"]["threads"]
    resources:
        cpus=lambda wildcards, threads: threads,
        mem_mb=config["ringing_correction"]["mem_mb"],
        runtime=config["ringing_correction"]["time_min"]
    group: "dwi_misc"
    shell:
        "mrdegibbs -nthreads {threads} {input} {output}"

rule convert_post_ringing:
    input:
        "{derivatives}/sub-{subject}_ses-{session}_{entity}_dwidnbcdegibbs.mif"
    output:
        "{derivatives}/sub-{subject}_ses-{session}_{entity}_dwidnbcdg.nii.gz"
    container:
        "docker://mrtrix3/mrtrix3:3.0.4"
    group: "dwi_misc"
    shell:
        "mrconvert {input} {output}"

rule synb0_disco:
    input:
        bids="{resultsdir}/bids/sub-{subject}/ses-{session}",
        b0="{resultsdir}/bids/derivatives/dwi_preprocessing/derivatives/misc/sub-{subject}/ses-{session}/dwi/sub-{subject}_ses-{session}_{entity}_nodif.nii.gz"
    output:
        directory("{resultsdir}/bids/derivatives/dwi_preprocessing/derivatives/synb0_disco/sub-{subject}_ses-{session}_{entity}")
    container:
        "docker://leonyichencai/synb0-disco:v3.0"
    threads: config["synb0_disco"]["threads"]
    resources:
        cpus=lambda wildcards, threads: threads,
        mem_mb=config["synb0_disco"]["mem_mb"],
        runtime=config["synb0_disco"]["time_min"]
    shell:
        "workflow/scripts/synb0_disco_pipeline.bash "
        "{config[fs_license]} "
        "{input.bids}/anat/sub-{wildcards.subject}_ses-{wildcards.session}_{wildcards.entity}_T1w.nii.gz "
        "{input.b0} "
        "{config[acqparams]} "
        "{output}"

rule eddy:
    message: "Eddy current correction"
    input:
        bids="{resultsdir}/bids/sub-{subject}/ses-{session}",
        dwidnbcdg="{resultsdir}/bids/derivatives/dwi_preprocessing/derivatives/misc/sub-{subject}/ses-{session}/dwi/sub-{subject}_ses-{session}_{entity}_dwidnbcdg.nii.gz",
        mask="{resultsdir}/bids/derivatives/dwi_preprocessing/derivatives/misc/sub-{subject}/ses-{session}/dwi/sub-{subject}_ses-{session}_{entity}_dwi_brain_mask.nii.gz",
        synb0_disco="{resultsdir}/bids/derivatives/dwi_preprocessing/derivatives/synb0_disco/sub-{subject}_ses-{session}_{entity}"
    output:
        "{resultsdir}/bids/derivatives/dwi_preprocessing/derivatives/eddy/sub-{subject}/ses-{session}/dwi/sub-{subject}_ses-{session}_{entity}_eddy.nii.gz",
        "{resultsdir}/bids/derivatives/dwi_preprocessing/derivatives/eddy/sub-{subject}/ses-{session}/dwi/sub-{subject}_ses-{session}_{entity}_eddy.eddy_rotated_bvecs"
    params:
        output=lambda wildcards, output: strip_extensions(output[0])
    conda:
        "envs/eddy.yaml"
    threads: config["eddy"]["threads"]
    resources:
        cpus=lambda wildcards, threads: threads,
        mem_mb=config["eddy"]["mem_mb"],
        runtime=config["eddy"]["time_min"],
        gpu=config["eddy"]["gpu"],
        slurm_extra=config["eddy"].get("slurm_extra", "")
    shell:
        "export FSLDIR=$(dirname $(which eddy_cpu))/.. && "
        ". ${{FSLDIR}}/etc/fslconf/fsl.sh && "
        "{config[eddy][executable]} "
        "--imain={input.dwidnbcdg} "
        "--mask={input.mask} "
        "--bvecs={input.bids}/dwi/sub-{wildcards.subject}_ses-{wildcards.session}_{wildcards.entity}_dwi.bvec "
        "--bvals={input.bids}/dwi/sub-{wildcards.subject}_ses-{wildcards.session}_{wildcards.entity}_dwi.bval "
        "--topup={input.synb0_disco}/topup "
        "--index={config[index]} "
        "--acqp={config[acqparams]} "
        "--out={params.output} "
        "--verbose "
        "{config[eddy][extra_args]}"

rule eddy_quad:
    message: "Eddy Quality Control"
    input:
        bids="{resultsdir}/bids/sub-{subject}/ses-{session}",
        eddy="{resultsdir}/bids/derivatives/dwi_preprocessing/derivatives/eddy/sub-{subject}/ses-{session}/dwi/sub-{subject}_ses-{session}_{entity}_eddy.nii.gz",
        mask="{resultsdir}/bids/derivatives/dwi_preprocessing/derivatives/misc/sub-{subject}/ses-{session}/dwi/sub-{subject}_ses-{session}_{entity}_dwi_brain_mask.nii.gz"
    output:
        directory("{resultsdir}/bids/derivatives/dwi_preprocessing/derivatives/eddy_quad/sub-{subject}_ses-{session}_{entity}")
    params:
        basename=lambda wildcards, input: strip_extensions(input["eddy"])
    conda:
        "envs/eddy.yaml"
    threads: config["eddy_quad"]["threads"]
    resources:
        cpus=lambda wildcards, threads: threads,
        mem_mb=config["eddy_quad"]["mem_mb"],
        runtime=config["eddy_quad"]["time_min"]
    shell:
        "export FSLDIR=$(dirname $(which eddy_cpu))/.. && "
        ". ${{FSLDIR}}/etc/fslconf/fsl.sh && "
        "eddy_quad "
        "{params.basename} "
        "-o {output} "
        "-m {input.mask} "
        "-b {input.bids}/dwi/sub-{wildcards.subject}_ses-{wildcards.session}_{wildcards.entity}_dwi.bval "
        "-idx {config[index]} "
        "-par {config[acqparams]}"

def get_derivatives_filenames(wildcards):
    # find all entities (e.g. runs) for a subject/session pair
    entities = [
        entity for subject, session, entity in zip(SUBJECTS, SESSIONS, ENTITIES)
        if subject == wildcards.subject and session == wildcards.session
    ]

    # generate the list of files that we want to use as final products of the pipeline
    basedir = "{resultsdir}/bids/derivatives/dwi_preprocessing/derivatives"
    filenames_pattern = [
        "/misc/sub-{subject}/ses-{session}/dwi/sub-{subject}_ses-{session}_{entity}_dwi_brain_mask.nii.gz",
        "/hd_bet/sub-{subject}/ses-{session}/anat/sub-{subject}_ses-{session}_{entity}_T1w_brain.nii.gz",
        "/eddy/sub-{subject}/ses-{session}/dwi/sub-{subject}_ses-{session}_{entity}_eddy.nii.gz",
        "/eddy/sub-{subject}/ses-{session}/dwi/sub-{subject}_ses-{session}_{entity}_eddy.eddy_rotated_bvecs"
    ]
    filenames_pattern = [basedir + pattern for pattern in filenames_pattern]
    filenames = expand(filenames_pattern, entity=entities, **wildcards)

    return filenames

rule dwi_preprocessing:
    localrule: True
    input:
        get_derivatives_filenames
    output:
        directory("{resultsdir}/bids/derivatives/dwi_preprocessing/sub-{subject}/ses-{session}")
    run:
        # TODO copy or move instead of linking?
        output_folder = Path(output[0])
        for result_file in map(Path, input):
            target_folder = output_folder / result_file.parent.name
            target_folder.mkdir(parents=True, exist_ok=True)
            (target_folder / result_file.name).symlink_to(result_file)

def get_eddy_qc_folders(wildcards):
    """list all eddy folders from all subject/session/entities triplet"""
    eddy_folders = []
    for subject, session, entities in zip(SUBJECTS, SESSIONS, ENTITIES):
        eddy_folder_pattern = (
            "{resultsdir}/bids/derivatives/dwi_preprocessing/derivatives/eddy_quad"
            "/sub-{subject}_ses-{session}_{entity}"
        )
        eddy_folder, = expand(
            eddy_folder_pattern,
            entity=entities,
            session=session,
            subject=subject,
            **wildcards
        )
        eddy_folders.append(eddy_folder)
    return eddy_folders

# TODO make it temporary
rule quad_folders:
    localrule: True
    input:
        get_eddy_qc_folders
    output:
        "{resultsdir}/bids/derivatives/dwi_preprocessing/derivatives/eddy_quad_folders.txt"
    run:
        Path(output[0]).write_text("\n".join(input))

# TODO skip if no quad folders or only one
rule eddy_squad:
    input:
        "{resultsdir}/bids/derivatives/dwi_preprocessing/derivatives/eddy_quad_folders.txt"
    output:
        directory("{resultsdir}/bids/derivatives/dwi_preprocessing/derivatives/eddy_squad")
    conda:
        "envs/eddy.yaml"
    threads: config["eddy_squad"]["threads"]
    resources:
        cpus=lambda wildcards, threads: threads,
        mem_mb=config["eddy_squad"]["mem_mb"],
        runtime=config["eddy_squad"]["time_min"]
    shell:
        "export FSLDIR=$(dirname $(which eddy_cpu))/.. && "
        ". ${{FSLDIR}}/etc/fslconf/fsl.sh && "
        "eddy_squad {input} -o {output}"
