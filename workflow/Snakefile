from pathlib import Path

from utils import list_sessions

configfile: "config/config.yaml"

module tidy_snake:
    snakefile:
        github("MataiMRI/tidySnake", path="workflow/Snakefile", branch="main")  # TODO use tag
    config: config

use rule * from tidy_snake as tidy_snake_*

module dwi_preprocessing:
    snakefile:
        "rules/dwi_preprocessing.smk"
    config: config

use rule * from dwi_preprocessing as dwi_preprocessing_*

SUBJECTS, SESSIONS, ENTITIES = list_sessions(config['resultsdir'])

rule all:
    localrule: True
    default_target: True
    input:
        rules.tidy_snake_all.input,
        expand(
            expand(
                "{{resultsdir}}/bids/derivatives/dwi_preprocessing/sub-{subject}/ses-{session}",
                zip,
                subject=SUBJECTS,
                session=SESSIONS,
            ),
            resultsdir=config["resultsdir"],
        ),
        expand(
            "{resultsdir}/bids/derivatives/dwi_preprocessing/derivatives/eddy_squad",
            resultsdir=config["resultsdir"]
        )

def get_derivatives_filenames(wildcards):
    # create a dependency on heudiconv rule output
    checkpoints.heudiconv.get(**wildcards)

    # find all entities (e.g. runs) for a subject/session pair
    bids_pattern = (
        f"{wildcards.resultsdir}/bids/sub-{wildcards.subject}/ses-{wildcards.session}"
        f"/anat/sub-{wildcards.subject}_ses-{wildcards.session}_"
        "{entity}_T1w.nii.gz"
    )
    entities, = glob_wildcards(bids_pattern)

    # generate the list of files that we want to use as final products of the pipeline
    basedir = "{resultsdir}/bids/derivatives/dwi_preprocessing/derivatives"
    filenames_pattern = [
        "/misc/sub-{subject}/ses-{session}/dwi/sub-{subject}_ses-{session}_{entity}_dwi_brain_mask.nii.gz",
        "/hd_bet/sub-{subject}/ses-{session}/anat/sub-{subject}_ses-{session}_{entity}_T1w_brain.nii.gz",
        "/eddy/sub-{subject}/ses-{session}/dwi/sub-{subject}_ses-{session}_{entity}_eddy.nii.gz",
        "/eddy/sub-{subject}/ses-{session}/dwi/sub-{subject}_ses-{session}_{entity}_eddy.eddy_rotated_bvecs"
    ]
    filenames_pattern = [basedir + pattern for pattern in filenames_pattern]
    filenames = expand(filenames_pattern, entity=entities, **wildcards)

    return filenames

rule dwi_preprocessing:
    localrule: True
    input:
        get_derivatives_filenames
    output:
        directory("{resultsdir}/bids/derivatives/dwi_preprocessing/sub-{subject}/ses-{session}")
    run:
        # TODO copy or move instead of linking?
        output_folder = Path(output[0])
        for result_file in map(Path, input):
            target_folder = output_folder / result_file.parent.name
            target_folder.mkdir(parents=True, exist_ok=True)
            (target_folder / result_file.name).symlink_to(result_file)

def get_eddy_qc_folders(wildcards):
    eddy_folders = []

    for subject, session in zip(SUBJECTS, SESSIONS):
        # create a dependency on heudiconv rule output
        checkpoints.heudiconv.get(session=session, subject=subject, **wildcards)

        # find all entities (e.g. runs) for a subject/session pair
        bids_pattern = (
            f"{wildcards.resultsdir}/bids/sub-{subject}/ses-{session}"
            f"/anat/sub-{subject}_ses-{session}_{{entity}}_T1w.nii.gz"
        )
        entities, = glob_wildcards(bids_pattern)

        # generate the list of eddy files
        eddy_folder_pattern = (
            "{resultsdir}/bids/derivatives/dwi_preprocessing/derivatives/eddy_quad"
            "/sub-{subject}_ses-{session}_{entity}"
        )
        eddy_folder, = expand(
            eddy_folder_pattern,
            entity=entities,
            session=session,
            subject=subject,
            **wildcards
        )

        eddy_folders.append(eddy_folder)

    return eddy_folders

# TODO make it temporary
rule quad_folders:
    localrule: True
    input:
        get_eddy_qc_folders
    output:
        "{resultsdir}/bids/derivatives/dwi_preprocessing/derivatives/eddy_quad_folders.txt"
    run:
        Path(output[0]).write_text("\n".join(input))

rule eddy_squad:
    input:
        "{resultsdir}/bids/derivatives/dwi_preprocessing/derivatives/eddy_quad_folders.txt"
    output:
        directory("{resultsdir}/bids/derivatives/dwi_preprocessing/derivatives/eddy_squad")
    conda:
        "envs/eddy.yaml"
    threads: config["eddy_squad"]["threads"]
    resources:
        cpus=lambda wildcards, threads: threads,
        mem_mb=config["eddy_squad"]["mem_mb"],
        runtime=config["eddy_squad"]["time_min"]
    shell:
        "export FSLDIR=$(dirname $(which eddy_cpu))/.. && "
        ". ${{FSLDIR}}/etc/fslconf/fsl.sh && "
        "eddy_squad {input} -o {output}"
